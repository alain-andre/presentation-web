<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=1024" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <title>Présentation sur les origines du web et où nous en sommes de nos jours. | Alain ANDRE</title>
    
    <meta name="description" content="Présentation sur les origines du web et où nous en sommes de nos jours." />
    <meta name="author" content="Alain ANDRE" />

    <script src="highlight.min.js"></script>

    <link href="default.min.css" rel="stylesheet" />
    <link href="css.css" rel="stylesheet" />
    <link href="impress-demo.css" rel="stylesheet" />
    
    <link rel="shortcut icon" href="favicon.png" />
    <link rel="apple-touch-icon" href="apple-touch-icon.png" />
</head>

<!--
    
    Body element is used by impress.js to set some useful class names, that will allow you to detect
    the support and state of the presentation in CSS or other scripts.
    
    First very useful class name is `impress-not-supported`. This class means, that browser doesn't
    support features required by impress.js, so you should apply some fallback styles in your CSS.
    It's not necessary to add it manually on this element. If the script detects that browser is not
    good enough it will add this class, but keeping it in HTML means that users without JavaScript
    will also get fallback styles.
    
    When impress.js script detects that browser supports all required features, this class name will
    be removed.
    
    The class name on body element also depends on currently active presentation step. More details about
    it can be found later, when `hint` element is being described.
    
-->
<body class="impress-not-supported">

<!--
    For example this fallback message is only visible when there is `impress-not-supported` class on body.
-->
<div class="fallback-message">
  <p>Your browser <b>doesn't support the features required</b> by impress.js, so you are presented with a simplified version of this presentation.</p>
  <p>For the best experience please use the latest <b>Chrome</b>, <b>Safari</b> or <b>Firefox</b> browser.</p>
</div>

<div id="impress">
  <div class="step slide" id="index" data-x="-1000" data-y="-20000">
    Présentation du web par <b>Alain ANDRE</b>.
    <p>Où comment en est-on arrivé aux applications web ?
    <img src="images/html-128.png">
    <img src="images/css-128.png">
    <img src="images/javascript-128.png">
    <img src="images/sass-128.png"></p>
  </div>

  <div class="step slide" id="html" data-x="0" data-y="-20000">
    <b>HTML</b>
    <p>Il s’agit d’un langage de <b>balisage</b> d’hypertexte créé en 1989 et qui évolue jusqu’en 1991 où il devient l’unique langage de <b>structuration</b> des pages webs.</p>
    <pre><code class="html">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div&gt; &lt;label&gt;Un libellé dans un bloc&lt;/label&gt; &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>
  </div>

  <div class="step slide" id="css" data-x="1000" data-y="-20000">
    <b>CSS</b>
    <p>Il s’agit de feuilles de style en cascade introduit en 1990 par les <b>navigateurs</b> qui standardisent l’<b>habillage</b> des <b>pages</b> webs. <br/>Sous la pression des développeurs, des navigateurs comme <b>Nescape</b> proposent alors d’habiller la structure HTML avec les feuilles fournis et non les leurs.</p>
    <pre><code class="css">
/* Une balise */
a { background: rgba(255, 255, 255, 0.5); }
/* Un identifiant */
#message-2 { padding: .1em; }
/* Une classe */
.fallback-message { background: #EEDC94; }
    </code></pre>
  </div>

  <div class="step slide" id="javascript" data-x="2000" data-y="-20000">
    <b>Javacript</b>
    <p>Il s’agit d’un langage de programmation de <b>scripts</b> executé côté <b>client</b>, <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Introduction_%C3%A0_JavaScript_orient%C3%A9_objet#Programmation_orient.C3.A9e_prototype" >orienté objet à prototype</a> (les fonctions créées sont elles-mêmes des objets de première classe), créé en 1995 pour le compte de Netscape et inspiré du Java. Il permet notamment de modifier de <b>DOM</b> HTML.</p>
  </div>

  <div class="step slide" id="php" data-x="3000" data-y="-20000">
    <b>PHP</b>
    <p>Il s’agit d’un langage de <b>script</b> utilisé côté <b>serveur</b> créé en 1994. Le Personal Home Page a été imaginé afin de pouvoir envoyer au client des <b>fichiers HTML différents</b> selon les informations reçus. Il existe d’autres langages tel que le Ruby, le python ou encore le .net.</p>
  </div>

  <div class="step slide" id="question1" data-x="4000" data-y="-20000">
    <b>Le web de nos jours</b> 
    <p>Qu'est-ce qui a changé ?<br/>En règle général</p>
  </div>

<!-- slides moderns -->
  <div class="step modern" id="slide2" data-x="2000" data-y="7000" data-rotate="90" data-scale="10" data-z="900" data-rotate-x="-20" data-rotate-y="10">
    Normaliser, standardiser, optimiser.
  </div>

  <div id="api" class="step modern" data-x="4000" data-y="3400" data-z="-1000" data-rotate="180" data-scale="3">
    <b>API</b>
    <p>Une <b>interface</b> de programmation est un ensemble normalisé de classes et de fonctions qui sert de façade par laquelle un logiciel offre des services à un autre logiciel. Pour nous, il s’agit d’un <b>service</b> web qui offre des <b>outils</b> à une <b>application</b>.
  </div>
  <div id="api1" class="step modern" data-x="4000" data-y="3400" data-z="-2000" data-rotate="180" data-scale="1">
    <p>Google, Facebook ou encore la SNCF proposent des APIs qui vont permettre à une application d’obtenir en <b>AJAX</b> des données et de les afficher comme ils le désirent. Pour ce faire, une <b>API web</b> est souvent normalisée <b>CRUD</b> et retourne des <b>JSON</b>s.</p>
  </div>

  <div id="ajax" class="step modern" data-x="500" data-y="6000" data-z="-1000" data-rotate="180" data-scale="3">
    <b>AJAX</b>
    <p><a href="https://developer.mozilla.org/fr/docs/Web/API/XMLHttpRequest">L'Asynchronous</a> JavaScript and XML arrive sur les <b>navigateurs</b> entre  1995 et 2005; il permet de construire des <b>applications Web</b> plus dynamiques. Le <b>JavaScript</b> va communiquer avec le serveur en <b>arrière-plan</b> via l’objet JavaScript <b>XMLHttpRequest</b> qui lui transmettra les données sous forme de XML (aujourd’hui de <b>json</b>).</p>
  </div>

  <div id="json" class="step modern" data-x="500" data-y="8000" data-z="-1000" data-rotate="180" data-scale="3">
    <b>JSON</b>
    <p>Il s’agit d’un format de données textuelles dérivé des <b>objets</b> du langage <b>JavaScript</b>. Il permet de représenter de l’information structurée.</p>
  </div>
  <div id="json2" class="step modern" data-x="500" data-y="8200" data-z="-7200" data-rotate="180" data-scale="1">
    <p>{ "voiture" :<br/> 
    &nbsp;&nbsp;{ "marque" : "Renault", "model" : "Mégane"}, <br/>
    &nbsp;&nbsp;{ "marque" : "Renault", "model" : "Safrane"}, <br/>
    &nbsp;&nbsp;{ "marque" : "Peugeot", "model" : "306"} <br/>
    }</p>
  </div>

  <div id="crud" class="step modern" data-x="2000" data-y="4000" data-z="-16000" data-rotate="180" data-scale="3">
    <b>CRUD</b>
    <p>Il s’agit d’une <b>standardisation</b> des actions de <b>stockage</b> d’informations en base de données. L’acronyme Create, Read, Update, Delete définit donc les méthodes <b>http</b> utilisées pour contacter le serveur.</p>
  </div>
  <div id="post" class="step modern" data-x="2000" data-y="4200" data-z="-17200" data-rotate="90" data-scale="1">
    <p>Un <b>post</b> http envoyé vers le serveur doit déclencher un <b>insert</b> dans la DB.</p>   
  </div>
  <div id="get" class="step modern" data-x="1800" data-y="4750" data-z="-17200" data-rotate="180" data-scale="1">
    <p>Un <b>get</b> http envoyé vers le serveur doit déclencher un <b>select</b> dans la DB.</p>   
  </div>
  <div id="put" class="step modern" data-x="1600" data-y="4200" data-z="-17200" data-rotate="270" data-scale="1">
    <p>Un <b>put</b> http envoyé vers le serveur doit déclencher un <b>update</b> dans la DB.</p>   
  </div>
  <div id="delete" class="step modern" data-x="1800" data-y="3650" data-z="-17200" data-rotate="360" data-scale="1">
    <p>Un <b>delete</b> http envoyé vers le serveur doit déclencher un <b>delete</b> dans la DB.</p>   
  </div>

  
  <!-- slide -->
  <div class="step modern" id="slide3" data-x="2000" data-y="7000" data-rotate="180" data-scale="10" data-z="900" data-rotate-x="-20" data-rotate-y="10">
    Comment travailler des architectures si complexes ?
  </div>

  <div id="framework" class="step modern" data-x="4000" data-y="3400" data-z="-1000" data-rotate="180" data-scale="3">
    <b>Frameworks</b>
    <p><img src="images/nodejs-128.png">
    <img src="images/ruby-rails-128.png"></p>
  </div>

<div class="hint">
  <p>Utilisez la barre d'espace ou les flêches pour naviger</p>
</div>

<script>
if ("ontouchstart" in document.documentElement) { 
  document.querySelector(".hint").innerHTML = "<p>Tap on the left or right to navigate</p>";
}
</script>

<script src="impress.js"></script>
<script>impress().init();</script>
<script>hljs.initHighlightingOnLoad();</script>

</body>
</html>
<!--
    
    The `impress()` function also gives you access to the API that controls the presentation.
    
    Just store the result of the call:
    
        var api = impress();
    
    and you will get three functions you can call:
    
        `api.init()` - initializes the presentation,
        `api.next()` - moves to next step of the presentation,
        `api.prev()` - moves to previous step of the presentation,
        `api.goto( idx | id | element, [duration] )` - moves the presentation to the step given by its index number
                id or the DOM element; second parameter can be used to define duration of the transition in ms,
                but it's optional - if not provided default transition duration for the presentation will be used.
    
    You can also simply call `impress()` again to get the API, so `impress().next()` is also allowed.
    Don't worry, it wont initialize the presentation again.
    
    For some example uses of this API check the last part of the source of impress.js where the API
    is used in event handlers.
    
-->